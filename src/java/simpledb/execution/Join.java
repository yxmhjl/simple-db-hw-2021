package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;
    private TupleDesc tupleDesc;
    private OpIterator[] child;
    private Tuple nowTuple;
//    private OpIterator child2;


    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child = new OpIterator[] {child1, child2};
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child[0].getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child[1].getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child[0].open();
        child[1].open();
    }

    public void close() {
        // some code goes here
        super.close();
        child[0].close();
        child[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child[0].rewind();
        child[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        OpIterator childtemp = child[1];
        while(child[0].hasNext() || nowTuple!=null) {
//            Tuple tupleleft = child[0].next();
            if(nowTuple == null && child[0].hasNext()) {
                nowTuple = child[0].next();
            }
            while(child[1].hasNext()) {
                Tuple tupleright = child[1].next();
                if(joinPredicate.filter(nowTuple, tupleright)) {
                    Tuple newtuple = new Tuple(TupleDesc.merge(nowTuple.getTupleDesc(), tupleright.getTupleDesc()));
                    for(int i=0;i<nowTuple.getTupleDesc().numFields();i++)
                    {
                        newtuple.setField(i,nowTuple.getField(i));
                    }
                    for(int j=0;j<tupleright.getTupleDesc().numFields();j++)
                    {
                        newtuple.setField(nowTuple.getTupleDesc().numFields()+j,tupleright.getField(j));
                    }
                    return newtuple;
                }
            }
            nowTuple = null;
            child[1].rewind();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return child;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child = children;
    }

}
